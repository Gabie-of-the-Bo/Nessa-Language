module primes [1.0]

import class Range from range;
import fn { iterator, next, is_consumed } from range;

fn is_prime(n: Number) -> Bool {
    if n <= 1 {
        return false;
    }
    
    let i: Number = 1;

    for i in Range(1, 1, n - 1) {
        i = i + 1;

        if n % i == 0 {
            return false;
        }
    }

    return true;
}

class Primes {
    start: Number;
    current: Number;
}

fn primes() -> Primes {
    return Primes(1, 1);
}

fn iterator(it: Primes) -> Primes {
    return it.deref<Primes>();
}

fn next(it: &&Primes) -> Number {
    let curr: &&Number = it.current();
    curr.inc();

    while !is_prime(curr.deref<Number>()) {
        curr.inc();
    }

    return curr.deref<Number>();
}

fn is_consumed(it: &&Primes) -> Bool {
    return false;
}
